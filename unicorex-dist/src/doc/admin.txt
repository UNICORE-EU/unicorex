[[ux_admin]]

Administration
--------------

Controlling UNICORE/X memory usage
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can set a limit on the number of service instances (e.g. jobs) per user.
This allows you to make sure your server stays nicely up and running even if 
flooded by jobs. To enable, edit +CONF/container.properties+ and
add properties, e.g.

---------------
container.wsrf.maxInstancesPerUser.JobManagement=200
container.wsrf.maxInstancesPerUser.FileTransfer=20
--------------

The last part of the property name is the service name, see xref:ux_features[]
for the services in UNICORE/X.
  
When the limits are reached, the server will report an error to the client (e.g. when
trying to submit a new job). 

[[ux_logging]]
Logging
~~~~~~~

UNICORE uses the Log4j logging framework
(http://logging.apache.org/log4j/1.2/), which supports many useful
options, such as logging to the server's syslog (on Linux). Log4j is
configured using a config file.  By default, this file is
+CONF/logging.properties+. To change the default, edit the start
script (+CONF/startup.properties+) or, on Windows, the
+CONF/wrapper.conf+. The config file is specified with a Java property
+log4j.configurationFile+.


[NOTE]
===========
You can change the logging configuration at runtime by editing the logging.properties file.
The new configuration will take effect a few seconds after the file has been modified.
===========

By default, log files are written to the the +LOGS+ directory. 

Within the logging pattern, you can use special variables to output information.
In addition to the variables defined by Log4j (such as '%d'), UNICORE defines several variables
related to the client and the current job.

[options="header"]
|===============================
| Variable         | Description
|%X\{clientName\}  |the distinguished name of the current client
|%X\{jobID\}	   | the unique ID of the currently processed job
|===============================


A sample logging pattern might be

-------------------
 %d [%X{clientName}] [%X{jobID}] [%t] %-5p %c{1} %x - %m%n
-------------------


For more info on controlling the logging we refer to the log4j documentation:

https://logging.apache.org/log4j/2.x/manual/configuration.html

==== Logger categories, names and levels

Logger names are hierarchical. In UNICORE, prefixes are used (e.g. "unicore.security") 
to which the Java class name is appended. For example, the XUUDB connector in UNICORE/X logs to 
the "unicore.security.XUUDBAuthoriser" logger. 

Therefore the logging output produced can be controlled in a fine-grained manner. 

Here is a table of the various logger categories


[options="header"]
|===============================
|Log category      | Description
|unicore           | All of UNICORE 
|unicore.security  | Security layer 
|unicore.services  | Service operational information 
|unicore.services.jobexecution | Information related to job execution 
|unicore.services.jobexecution.USAGE | Usage logging (see next section)
|unicore.xnjs      | XNJS subsystem (execution engine) 
|unicore.xnjs.tsi  | TSI subsystem (batch system connector) 
|unicore.client    | Client calls (to other servers) 
|unicore.wsrflite  | Underlying services environment (WSRF framework)
|uftp              | UFTP client/server communication
|org.apache.cxf    | Web service toolkit (Apache CXF)
|====================================================================

[NOTE]
===========
Please take care to not set the global level to TRACE or DEBUG for long times, 
as this will produce a lot of output.
===========

==== Usage logging

Often it is desirable to keep track of the usage of your UNICORE site. The UNICORE/X
server has a special logger category called +unicore.services.jobexecution.USAGE+ which
logs information about finished jobs at INFO level.

Administration and monitoring
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
The health of a UNICORE/X container, and things like running services, lifetimes, etc. can be 
monitored in several ways.
  
==== Commandline client (UCC)

It is possible to use the UNICORE commandline client (UCC) for administrative and operations tasks.

To do this you need to configure UCC with administrative
privileges. One way to do this is using the _server_ certificate of
the UNICORE/X server, which will give UCC  administrator rights.

Also you should connect directly to UNICORE/X, not to the registry as
usual. Here is an example UCC configuration file. Say your UNICORE/X
server is running on _myhost_ on port 7777, your preferences file
would look like this

--------------------
registry=https://myhost:7777/services/Registry?res=default_registry

# use UNICORE/X keystore
credential.path=/path/to/unicorex/keystore
credential.password=...

# truststore config omitted

-------------------

Note that the registry URL points directly to the UNICORE/X server, not to a gateway.


Another way is to add the "admin" role to your user account, and
select this role when running UCC commands

--------
ucc .... -Z role:admin
--------


===== Examples

Some UCC commands that are useful are the _list-jobs_, _list-sites_ and _wsrf_ commands. 
Using _list-jobs_ you can search for jobs with given properties, whereas the _wsrf_ command 
allows to look at any resource, or even destroy resources.

To list all jobs on the server belonging to a specific user, do 
  
------
ucc list-jobs -f Log contains <username>
------

where _username_ is some unique part of the user's DN, or the xlogin. Similarly, you can
filter based on other properties of the job.

The _wsrf_ command can be used to destroy resources, extend their lifetime 
and look at their properties. Please see "ucc wsrf -h" for details.

Try

----------
ucc wsrf getproperties https://myhost:7777/services/TargetSystemFactory?res=default_target_system_factory
----------    

[[ux_admin_service]]
==== The Admin web service

The Admin service is a powerful tool to get "inside information" about your server using the UCC 
(or possibly another UNICORE client) and run one of the available "admin actions", which provide 
useful functions.

If you have enabled the admin service, you can do 

----------
ucc admin-info -l
----------    

to get information about available admin services. Note that you need to have role "admin" to invoke 
the admin service. The output includes information about the available administrative commands.
To run one of these, you can use the _admin-runcommand_ command. For example, to temporarily 
disable job submission

----------
ucc admin-runcommand ToggleJobSubmission
----------    

To have a look at the internal information about a user job, try

----------
ucc admin-runcommand ShowJobDetails jobID=......
----------    

where +jobID+ is the unique ID of the job.


=== Migration of a UNICORE/X server to another physical host

If you want to migrate a UNICORE/X server to another host, there are several things to consider.
The hostname and port are listed in CONF/wsrflite.xml and usually in the Gateway's connection.properties 
file. These you will have to change. Otherwise, you can copy the relevant files in CONF to the 
new machine. Also, the persisted state data needs to be moved to the new machine, if it is stored on the file
system. If it is stored in a database, there is nothing to be done.
If you are using a TSI server, you might need to edit the TSI's properties file and update the 
+tsi.njs_machine+ property.
