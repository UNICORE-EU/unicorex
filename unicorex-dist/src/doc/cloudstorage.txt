[[ux_cloud_storage]]
   
Cloud storages support (S3, Swift, CDMI)
----------------------------------------

UNICORE/X can use S3, Swift or CDMI storages as backend. These 
storages can be configured both as a normal storage (shared or attached
to target systems) and as storage backend for the StorageFactory
service (see also xref:ux_storages[])

Basic configuration
~~~~~~~~~~~~~~~~~~~

Configuring a cloud storage as a shared storage works exactly as described in
xref:ux_storages[], you just have to make sure to use the required
properties.


The following sections list the required properties for all of the
supported cloud storages. Note that the prefix depends on what type of
storage (shared, dynamic, TSS, job working directory) is being
configured.


==== S3 

---------
<prefix>.type=CUSTOM
<prefix>.class=de.fzj.unicore.uas.jclouds.s3.S3StorageImpl
<prefix>.infoProviderClass=de.fzj.unicore.uas.jclouds.s3.S3InfoProvider

# provider is "s3" or "aws-s3"
<prefix>.settings.provider=s3

# http(s) URL of the S3 storage 
<prefix>.settings.endpoint=...

# authentication keys
<prefix>.settings.accessKey=...
<prefix>.settings.secretKey=...

# may the user set the endpoint (default: false)
<prefix>.settings.allowUserDefinedEndpoint=false

---------



==== Swift

---------

<prefix>.type=CUSTOM
<prefix>.class=de.fzj.unicore.uas.jclouds.swift.SwiftStorageImpl
<prefix>.infoProviderClass=de.fzj.unicore.uas.jclouds.swift.SwiftInfoProvider

# http(s) URL of the Swift storage 
<prefix>.settings.endpoint=...

# authentication username/password
<prefix>.settings.username=...
<prefix>.settings.password=...

# allow the user to set the endpoint
<prefix>.settings.allowUserDefinedEndpoint=true

---------


==== CDMI

---------

<prefix>.type=CUSTOM
<prefix>.class=de.fzj.unicore.uas.cdmi.CDMIStorageImpl
<prefix>.infoProviderClass=de.fzj.unicore.uas.cdmi.CDMIInfoProvider

# http(s) URL of the CDMI storage 
<prefix>.settings.endpoint=...

# authentication username/password
<prefix>.settings.username=...
<prefix>.settings.password=...

# Openstack Keystone token endpoint
# if not set, HTTP basic authentication will be used
<prefix>.settings.tokenEndpoint=...

# allow the user to set the endpoint
<prefix>.settings.allowUserDefinedEndpoint=true

----------


Compare the examples below! The authentication keys can be handled
flexibly, as detailed in the next section.


Authentication credentials
~~~~~~~~~~~~~~~~~~~~~~~~~~

There are several ways to configure the required credentials for
authenticating the user to the cloud store. Two of them are done
server-side (i.e. by the UNICORE administrator) and the third uses the
credentias provided by the user.

UNICORE/X looks for credentials in the following order

  * credentials provided by the user
  * per-user credentials provided via UNICORE's attribute sources
  * fixed credentials provided in the server config

It is always possible for the user to pass in credentials when
creating the storage using the StorageFactory service. Of course this
mechanism does not apply when using a cloud store for a different type
of storage service.

The second option (using attribute sources) allows to configure
per-user credentials, but managing everything server-side, so the user has a
nice single-sign-on experience when using UNICORE.

If you use the map file attribute source, an example entry looks like
this:

-----------------
  <entry key="CN=Demo User,O=UNICORE,C=EU">

     <!-- standard UNICORE attributes -->

     <attribute name="role">
        <value>user</value>
     </attribute>
     <attribute name="xlogin">
        <value>somebody</value>
     </attribute>
     <attribute name="group">
        <value>users</value>
     </attribute>
     
      <!-- S3 specific attributes -->

      <attribute name="s3.accessKey">
         <value> ... access key data omitted ... </value>
      </attribute>
      <attribute name="s3.secretKey">
         <value> ... secret key data omitted ... </value>
      </attribute>     
     
   </entry>

-----------------


Last not least, the keys can also be hardcoded into the config, using
the accessKey and secretKey properties.

-----
# authentication keys
<prefix>.settings.accessKey=...
<prefix>.settings.secretKey=...
-----


Examples
~~~~~~~~

==== Dynamic storage using the StorageFactory

If configured as a dynamic storage, a new directory will be created corresponding
to each storage. 

In the following example we configure S3 in addition to the "DEFAULT" storage type.

--------------------------------
#
# Available storage types
#
coreServices.sms.factory.storagetypes=DEFAULT S3

#
# NOTE
#
# the configuration for the "DEFAULT" storage type
# is OMITTED in this example!
#

#
# S3 storage configuration
#
coreServices.sms.factory.S3.description=S3 interface
coreServices.sms.factory.S3.type=CUSTOM
coreServices.sms.factory.S3.class=de.fzj.unicore.uas.jclouds.s3.S3StorageImpl
coreServices.sms.factory.S3.infoProviderClass=de.fzj.unicore.uas.jclouds.s3.S3InfoProvider
coreServices.sms.factory.S3.path=/dynamic-storages
coreServices.sms.factory.S3.cleanup=false
coreServices.sms.factory.S3.protocols=BFT

#
# the next four settings depend on your S3 backend
#

# provider is "s3" or "aws-s3"
coreServices.sms.factory.S3.settings.provider=s3
# endpoint of the S3 
coreServices.sms.factory.S3.settings.endpoint=...
# OPTIONAL access key and secret key
coreServices.sms.factory.S3.settings.accessKey=...
coreServices.sms.factory.S3.settings.secretKey=...

# optional: may user overwrite endpoint and provider?
# this defaults to 'false'!
coreServices.sms.factory.S3.settings.allowUserdefinedEndpoint=true

-------------------------------------


==== Shared storage

-------------

# add 'S3' to the list of enabled shares
coreServices.sms.storage.enabledStorages=S3 ...

# S3 configuration
coreServices.sms.storage.S3.description=S3 interface
coreServices.sms.storage.S3.type=CUSTOM
coreServices.sms.storage.S3.class=de.fzj.unicore.uas.jclouds.s3.S3StorageImpl
coreServices.sms.storage.S3.infoProviderClass=de.fzj.unicore.uas.jclouds.s3.S3InfoProvider
coreServices.sms.storage.S3.path=/
coreServices.sms.storage.S3.protocols=BFT

coreServices.sms.storage.S3.settings.provider=s3
coreServices.sms.storage.S3.settings.endpoint=...
coreServices.sms.storage.S3.settings.accessKey=...
coreServices.sms.storage.S3.settings.secretKey=...

-------------

Configuring as a TSS storage works accordingly.

