[[ux_configuration]]
Configuration of UNICORE/X
--------------------------

Overview of the main configuration options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

UNICORE/X is the central component in a UNICORE system and as such has
a number of interfaces to other UNICORE components, as well as many of
configuration options. This section gives an overview of what can and
should be configured. The detailed configuration guide follows in the
next sections.

==== Mandatory configuration

 - SSL certificates and basic security: UNICORE uses SSL certificates for all servers. 
For UNICORE/X these settings are made in the container.properties config file

 - Attribute sources: various ways are available to assign local
attributes to users, such as Unix user name, groups and role. For
details, consult xref:use_aip[].

 - Backend / target system access: to access a resource manager like Slurm, the
UNICORE TSI needs to be installed and UNICORE/X needs to be configured accordingly. Please
consult xref:ux_xnjs[].

 - You can choose to enable/disable certain UNICORE features, for example if you
wish to set up a storage-only UNICORE server. Please refer to xref:ux_features[].

UNICORE/X is configured using several config files residing in the
CONF directory, see xref:ux_install[] for the location of the CONF
directory.

Config file overview
~~~~~~~~~~~~~~~~~~~~

The following table indicates the main configuration files. Depending on
configuration and installed extensions, some of these files may not be present, or
more files may be present.

UNICORE/X watches some configuration files for changes, and tries to reconfigure 
if they are modified, at least where possible. This is indicated in the
"dynamically reloaded" column.

.UNICORE/X configuration files
[options="header"]
|===============================
|config file          | usage					| dynamically reloaded
|startup.properties   |Java process settings (e.g. memory), lib/log/conf directories | no
|logging.properties   |Logging levels, logfiles and their properties | yes
|uas.config	      |Main server config file. Defines features, storages, AuthN/AuthZ, AIPs/PDPs  | no
|container.properties |Server address, SSL settings, Web server settings | no
|xnjs.properties      |Backend properties for the UNICORE TSI | no
|simpleidb	      |Backend, installed applications, resources | yes
|simpleuudb           |Maps user DNs to local attributes (optional) | yes
|rest-users.txt       |Usernames/passwords for REST authentication (optional) | yes
|xacml2Policies/*.xml |Access control policy for securing the web services|yes, via xacml2.config (do 'touch xacml2.config' to trigger) 
|xacml2.config	      |Configure the XACML2 access control component | yes
|vo.config            |Configure the use of Unity as an attribute source (optional) | no
|===============================

Settings for the UNICORE/X process (e.g. memory)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The properties controlling the Java virtual machine running the
UNICORE/X process are configured in
  
  - UNIX: the CONF/startup.properties configuration file
  
  - Windows: the "CONF\\wrapper.conf" configuration file
  

These properties include basic settings (like maximum memory),
see xref:ux_admin[] for more on these.

General
  
Config file formats
~~~~~~~~~~~~~~~~~~~

UNICORE/X uses two different formats for configuration. 

==== Java properties

    - Each property can be assigned a value using the syntax "name=value"
  
    - Please do not quote values, as the quotes will be interpreted as part of the value

    - Comment lines are started by the "#" 
  
    - Multiline values are possible by ending lines with "\", e.g.
  
-------
      name=value1 \
      value2
-------
   
In this example the value of the "name" property will be "value1 value2".

You can use system environment variables within property values, e.g.

--------
name=${some_systemvariable}
--------

Only use this syntax +${...}+ to reference UNICORE/X system variables!

To use UNIX system variables e.g. in storage path definitions use the
syntax +$VARIABLE+, i.e. WITHOUT curly braces.

==== XML

Various XML dialects are being used, so please refer to the example files distributed with
UNICORE for more information on the syntax. In general XML is a bit unfriendly to edit, and
it is rather easy to introduce typos. 

[NOTE]
============
It is advisable to run a tool such as 'xmllint' after editing XML files to check for
typos
============


UNICORE/X container configuration overview
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following table gives an overview of the basic settings for a
UNICORE/X server. These can be set in +uas.config+ or +container.properties+.
Many of the settings (e.g. security) will be explained in more detail in
separate sections.

include::containerProperties.txt[]

Integration of UNICORE/X with other parts of a UNICORE infrastructure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Since UNICORE/X is the central component, it is interfaced to other 
parts of the UNICORE architecture, i.e. the Gateway and (optionally) 
a Registry.

==== Gateway

The gateway address is hard-coded into CONF/container.properties, using
the "container.baseurl" property:

-------------------------
container.baseurl=https://Gateway_HOST:Gateway_PORT/SITENAME/services
-------------------------

where Gateway_HOST and Gateway_PORT are the host and port of the
gateway, and SITENAME is the UNICORE/X site name. The gateway address
MUST be accessible from the UNICORE/X node!

On the gateway side, the UNICORE/X address is hard-coded as well,
using an entry SITENAME=address in the connections.properties file
pointing to the network address of the UNICORE/X container.


==== Registry

It is possible to configure UNICORE/X to contact one or more external
or "global" Registries in order to publish information on crucial
services there. 

For example

-------------------------
container.externalregistry.use=true
container.externalregistry.url=https://host1:8080/REGISTRY/services/Registry?res=default_registry
container.externalregistry.url2=https://host2:8080/BACKUP/services/Registry?res=default_registry
-------------------------

==== Unity

If you want to support user authentication via Unity, you have to
configure UNICORE/X to trust one or more Unity servers. This is done
using the +container.security.trustedAssertionIssuers+ property. This
configures a truststore containing the certificates of all trusted
Unity servers (NOT the CA certificates).

For example, to configure a directory containing the trusted certificates
in PEM format:

-------------------------
# configure trusted Unity certificates 
container.security.trustedAssertionIssuers.type=directory
container.security.trustedAssertionIssuers.directoryLocations.1=conf/unity/unity.pem
-------------------------

All the usual options for configuring truststores are available here, 
as well, as described in Section [[use-authtrust]].

[NOTE]
==========
To enable certificate-less end user access, you will also make sure that
the Gateway does not require SSL client-authentication. Please refer to the
Gateway manual.
==========

Startup code
~~~~~~~~~~~~

In order to provide a flexible initialization process for UNICORE/X,
there is a set of properties named "container.onstartup.*". The
value(s) of this property consists of a whitespace separated list of
Java classes which must be implementing the "Runnable" interface. Many
extensions for UNICORE/X rely on an entry in this property to
initialise themselves.
  

.Startup code
[options="header"]
|=============================
| class name			   	    | description | usage
|de.fzj.unicore.uas.util.DefaultOnStartup   | initialises the job management system and the "local" registry; should usually be run on startup | normal UNICORE/X servers 
|============================


Security
~~~~~~~~
  
==== Overview

Security is a complex issue, and many options exist. On a high level, the following items
need to be configured.
   
   - SSL setup (keystore and truststore settings for securing the
     basic communication between components)

   - Attribute sources configuration which assign an authorisation
   role, UNIX login, group and other properties to UNICORE users. A
   number of attribute sources exist, which can be combined using
   various combining algorithms.  These are configured in the
   uas.config file. Due to the complexity, the description of the
   configuration options can be found in xref:use_aip[].
    
   - Access control setup (controlling in detail who can do what on
   which services). Again, several options exist, which are described
   in xref:use_pdp[].
  


[[use-secref]]
==== General security options

This table presents all security related options, except credential and truststore settings
which are described in the subsequent section.

include::use-ref-security.txt[]

[[use-authtrust]]
==== Credential and truststore settings

These properties are used to configure the server's credential (used to
make outgoing SSL connections) and truststore. The truststore controls
which incoming SSL connections are accepted.

We recommend using a credential in PKCS12 or .pem format, and a
directory containing .pem files as truststore.

:leveloffset: 2
include::sec-ref-credProperties.txt[]
include::sec-ref-trustProperties.txt[]
:leveloffset: 0


Configuring the execution backend (XNJS and TSI)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Information on the configuration of the XNJS and TSI backend can be found in xref:ux_xnjs[].

Configuring storage services
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Information on the configuration of the storage factory service, shared storages and per-user 
storages attached to target systems can be found in xref:ux_storages[].

HTTP proxy, timeout and web server settings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A number of settings exist that control the the web server and the
HTTPClient library used for outgoing HTTP(s) calls.

The HTTP server options are shown in the following table.

include::sec-ref-jettyProperties.txt[]


The HTTP client options are the following

include::sec-ref-clientProperties.txt[]
