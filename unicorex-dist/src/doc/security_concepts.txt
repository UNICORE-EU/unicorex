[[ux_security_concepts]]
Security concepts in UNICORE/X
------------------------------

This section describes the basic security concepts and architecture used in 
UNICORE/X. The overall procedure performed by the security infrastructure 
can be summarised as follows:

  - the incoming message is authenticated first by the SSL layer. In
    general messages will be relegated through the Gateway, and will
    not be directly from end user clients.

  - extract authentication information from the HTTP headers, such as
    username/password, OAuth token, a JWT delegation token or even
    X509 certificate information

  - authenticate the message using the configured authentication
    handlers.  This procedure will assign a X500 distinguished name to
    the current user, which in UNICORE terms is the user identity.

  - a security session is established (if sessions are enabled), and
    the client can simply send the security session ID on subsequent
    requests to avoid having to go through the full authentication
    process again.

  - extract further information used for authorisation from the
    message sent to the server. This information may include:
    originator of the message(in case the message passed through a
    UNICORE gateway), trust delegation tokens, incoming VO membership
    assertions, etc.

  - generate or lookup attributes to be used used for authorisation in
    the configured attribute sources
  
  - perform policy check by executing a PDP request

All these steps can be widely configured.

Security concepts
~~~~~~~~~~~~~~~~~

==== Identity
  
A server has a certificate, which is used to identify the server when
it makes a web service request. This certificate resides in the server
keystore, (see xref:ux_configuration[]).

A user request is assigned an identity during the authentication
process.  Identities are X.500 distinguished names.  Requests without
authentication are 'anonymous' and are usually limited to
informational endpoints.

==== Security tokens

When a client makes a request to UNICORE/X, a number of tokens are
read from the message headers. These are placed in the security
context for the current request.

==== Resource ownership 

Each service is 'owned' by some entity identified by an X.500
distinguished name.  By default, the server is the owner. When a
resource is created on user request (for example when submitting a
job), the user is the owner.


==== Trust delegation

Messages can be sent from other servers on behalf of an end user. The
server will "prove" this by using a JWT token for authentication,
which contains the target user's identity (X500 name), and which is
signed by the sending server. The receiving server can check the
signature with the sender's public key, which will generally be read
from the shared registry.

==== Attributes

UNICORE/X retrieves user attributes using either a local component or
a remote service.  For example, an XUUDB attribute service can be
configured.  See xref:use_aip[] for more information.

==== Policy checks

Each request is checked based on the following information.
  
  - available security tokens
  
  - the resource owner
  
  - the resource accessed (e.g. service name + instance id)
  
  - the activity to be performed (the web method such as GET)
  
The validation is performed by the PDP (Policy Decision Point). The
default PDP uses a list of rules expressed in XACML 2.0 format that
are configured for the server. The xref:use_pdp[] describes how to
configure different engines for policy evaluation including a remote
one.

==== Authorisation

A request is allowed, if the PDP allows it, based on the user's attributes.


==== Security sessions

If enabled (which is the default), the server generates a security
session after successful authentication. The session ID is sent back
to the client (via HTTP header 'X-UNICORE-SecuritySession' in the
response), allowing the client to authenticate subsequent requests
using this session ID (using the same HTTP header).  This will
speed-up the client-server communication, especially in cases where
external authentication (e.g. via Unity is used).  These sessions have
a limited lifetime (8 hours by default).

NOTE: the security session only covers authentication - attribute
assignment and authorization is always done for each request.

For details on how to configure this feature, see the general properties
overview in section xref:ux_configuration[]
