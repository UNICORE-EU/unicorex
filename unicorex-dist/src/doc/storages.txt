[[ux_storages]]
Configuration of storages
-------------------------

A UNICORE/X server can make storage systems (e.g. file systems)
accessible to users in several ways. 

  * storages endpoints can be defined which are available even if there is no compute service;
  * storages can be "attached" to compute services;
  * each job has a working directory, which is exposed as a storage 
    instance and can be freely accessed using a UNICORE client.
  * the "StorageFactory" service allows users to create dynamic storage instances, which is very 
    useful if the UNICORE workflow system is used;

Storages have additional features which are covered in other sections of this
manual.

  * Metadata management is covered in xref:ux_metadata[]
  * Data-triggered processing is described in xref:ux_dataprocessing[]


Configuring storage services
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Storage services are created on server startup and published in the registry.
They are independent of any compute services and accessible for all users.

[NOTE]
============
Service accessibility does not imply file system accessibility. The
file system access control is still in place, so users must have the
appropriate Unix permissions to access a storage.
============

The basic property controls which storages are enabled

----------------
coreServices.sms.storage.enabledStorages=HOME WORK SHARE2 ...
----------------

Each enabled storage is configured using a set of properties. 

include::shared-smsProperties.txt[]



For example to define a storage for accessing the user's HOME and some shared path


----------------
coreServices.sms.storage.HOME.name=HOME
coreServices.sms.storage.HOME.type=HOME
coreServices.sms.storage.HOME.description=User's HOME

coreServices.sms.storage.WORK.name=WORK
coreServices.sms.storage.WORK.description=Shared projects workspace
coreServices.sms.storage.WORK.path=/mnt/gpfs/projects
coreServices.sms.storage.WORK.defaultUmask=07
----------------

The 'name' parameter will be used as the storage's service ID. This means that the URL
to access these storages will be something like

----------------
https://<site_address>/rest/core/storages/HOME

https://<site_address>/rest/core/storages/WORK
----------------

and via the SOAP/XML interfaces

----------------
https://<site_address>/services/StorageManagement?res=HOME

https://<site_address>/services/StorageManagement?res=WORK
----------------


Usually, the "name" property is not needed, if you set it it should
match the ID to avoid confusion.

The other storage properties (see the previous section) are also accepted!

Configuring storages attached to TargetSystem instances
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Each TargetSystem instance can have one or more storages attached to
it. Note that this is different case from the shared storages which
are not attached to any particular TargetSystem. The practical
difference is that to use storages attached to a TargetSystem, a user
must first create one.

By default, NO storages are created.

For example, to allows users access their home directory on the target system, 
you need to add a storage. This is done using configuration entries in uas.config.

include::tss-smsProperties.txt[]

Here, "N" stands for an identifier (e.g. 1,2, 3, ...) to distinguish the storages. For example, 
to configure three storages (Home, one named TEMP pointing to "/tmp" and the other named DEISA_HOME 
pointing to "$DEISA_HOME") you would add the following configuration entries in uas.config:

-------------------
coreServices.targetsystem.storage.0.name=Home
coreServices.targetsystem.storage.0.type=HOME

coreServices.targetsystem.storage.1.name=TEMP
coreServices.targetsystem.storage.1.type=FIXEDPATH
coreServices.targetsystem.storage.1.path=/tmp

coreServices.targetsystem.storage.2.name=DEISA_HOME
coreServices.targetsystem.storage.2.type=VARIABLE
coreServices.targetsystem.storage.2.path=$DEISA_HOMES

# example for a custom SMS implementation 
coreServices.targetsystem.storage.3.name=MyStorage
coreServices.targetsystem.storage.3.type=CUSTOM
coreServices.targetsystem.storage.3.path=/
coreServices.targetsystem.storage.3.class=my.custom.sms.ImplementationClass
-------------------


==== Controlling target system's storage resources

By default storage resource names (used in storage address) are formed from
the owning user's xlogin and the storage type name, e.g. "someuser-Home". This is quite useful 
as users can write a URL of the storage without prior searching for its address.
However if the site's user mapping configuration maps more than one grid certificate to the same
xlogin, then this solution is not acceptable: only the first user connecting would be able to access
her/his storage. This is because resource owners are expressed as grid user names (certificate DNs) and not xlogins.
To have unique, but dynamically created and non user friendly names of storages 
(and solve the problem of non-unique DN mappings) set this option in uas.config:

------------------
coreServices.targetsystem.uniqueStorageIds=true
------------------


Configuring the StorageFactory service
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The StorageFactory service allows clients to dynamically create storage instances.
These can have different types, for example you could have storages on a normal
filesystem, and other storages on an S3 cluster.

The basic property controls which storage types are supported

----------------
coreServices.sms.enabledFactories=TYPE1 TYPE2 ...
----------------

Each supported storage type is configured using a set of properties

include::smf-smsProperties.txt[]

For example

----------------
coreServices.sms.factory.TYPE1.description=GPFS file system
coreServices.sms.factory.TYPE1.fixedpath=GPFS file system
coreServices.sms.factory.TYPE1.path=/mnt/gpfs/unicore/unicorex-1/storage-factory

# if this is set to true, the directory corresponding to a storage instance will
# be deleted when the instance is destroyed. Defaults to "true"
coreServices.sms.factory.TYPE1.cleanup=true

# allow the user to pass in a path on storage creation. Defaults to "true"
coreServices.sms.factory.TYPE1.allowUserDefinedPath=true

----------------

The "path" parameter determines the base directory used for the storage instances 
(i.e. on the backend), and the unique ID of the storage will be appended automatically.

The "cleanup" parameter controls whether the storage directory will be deleted when the storage
is destroyed. 

It is also possible to let the user control the path of the dynamic
storage, by sending a "path" parameter when creating the storage.
For example, the user can use UCC to create a storage:

------
$> ucc create-sms path=/opt/projects/shared-data
------

This will create a storage resource for accessing the given directory.
In this case, there will be no cleanup, and no appended storage ID.

The normal storage properties (see the previous section) are also
accepted: "type", "class", "filterFiles" etc.

If you have a custom storage type, an additional "class" parameter defines the
Java class name to use (as in normal SMS case). For example:

----------------------
coreServices.sms.factory.TYPE1.type=CUSTOM
coreServices.sms.factory.TYPE1.class=de.fzj.unicore.uas.jclouds.s3.S3StorageImpl
----------------------


Configuring the job working directory storage services
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For each UNICORE job instance, a storage instance is created,
corresponding to the job's working directory. In some cases you might
wish to control this storage in detail, e.g. configure a special
storage backend.

The working directory storages are configured using a set of
properties, which is the same as for the other storage types, except
for the prefix.

[NOTE]
============
The "path", "name", "description", "enableTrigger" and
"disableMetadata" properties are ignored, they are set by the
server.
============

For example

----------------
coreServices.sms.jobDirectories.type=CUSTOM
coreServices.sms.jobDirectories.class=your.custom.SMSImpl
----------------


