[[ux_xnjs-idb-applications]]

IDB Application definitions
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Apart from describing the available queues and their associated
resources, the most important functionality of the IDB is defining
applications.

Applications can be defined in the main IDB file,

-------------
{
 Applications: [
   { Name: Date, ...  },
   { Name: "Python script", ... },
 ],
}
-------------

or in separate files (one application per file).

Here is a quick overview of the available elements, which will
be documented in detail below.

.JSON IDB Application
[options="header"]
|===============================
|Tag                   | Type            | Description | Optional/mandatory
|Name                  | String          | Application name | Mandatory
|Version               | String          | Application version | Mandatory
|Description           | String          | Application description | Optional
|Executable            | String          | Executable | Mandatory
|Arguments             | List of strings | Command line arguments | Optional
|Environment           | Map of strings  | Environment values | Optional
4+^e| 
|PreCommand            | String          | Pre-processing executed on the login node | Optional
|PostCommand           | String          | Post-processing executed on the login node | Optional
|Prologue              | String          | Pre-processing in the batch script | Optional
|Epiloge               | String          | Post-processing in the batch script | Optional
4+^e| 
|Parameters | Map | Metadata for application arguments / parameters | Optional	
4+^e|
|Resources | Map | Application-specific resource requests | Optional
|RunOnLoginNode        | "true"/"false"  | Run job on login node | Optional, default=false
|IgnoreNonZeroExitCode | "true"/"false"  | Don't fail the job if app exits with non-zero exit code | Optional, default=true
|===============================

Here is an example:

---------------
{
 Name: "Python script",
 Version: "3.4",
 Description: "Python 3 interpreter",
 Executable: "/usr/bin/python3",
 Arguments: [
    "-d$DEBUG?",
    "-vVERBOSE?",
    "$OPTIONS?",
    "$SOURCE?",
    "$ARGUMENTS",
  ],

 Parameters: {
   "SOURCE": {Type: "filename"},
   "ARGUMENTS": {Type: "string"},
   "DEBUG": {Type: "boolean"},
   "VERBOSE": {Type: "boolean"},
   "OPTIONS": {Type: "string"},
 },

 Prologue: "module load python3",

 Resources: {
  Nodes: 1,
 }
}
----------------


==== Basic Application definition

Here is an example entry for the "Date" application on a UNIX system

--------------------------------------
{
  Name: Date,
  Version: 1.0,
  Executable: "/bin/date",
}

-------------------------------------

Invoking the "Date" application will be simply mapped to an invocation of "/bin/date".

==== Arguments

Command line arguments are specified using <Argument> tags:

--------------------------------------
{
  Name: LS,
  Version: 1.0,
  Executable: /bin/ls
  Arguments: [ "-l", "-t", ],
}
-------------------------------------

This would result in a command line "/bin/ls -l -t".

==== Conditional Arguments

The job submission from a client usually contains environment variables to be
set when running the application. It often happens that a certain argument
should only be included if a corresponding environment variable is set.
This can be achieved by using "conditional arguments" in the incarnation
definition. Conditional arguments are indicated by a quastion mark "?" 
appended to the argument value:


--------------------------------------
{
  Name: JAVA,
  Version: "11.0",
  Description: "Java virtual machine",
  Executable: "/usr/bin/java",

  Arguments: [ "-cp$CLASSPATH?", ],

}
-------------------------------------

Here, +-cp$CLASSPATH?+ is an optional argument. 

If the user's job submission now includes a environment variable named
+CLASSPATH+ the incarnated commandline will be
"/usr/bin/java -cp$CLASSPATH ...", otherwise just "/usr/bin/java ...".

This allows very flexible incarnations.

==== Environment variables

To set environment variables, add a map 

--------------------------------------
{
  Name: LS,
  Version: 1.0,
  Executable: "/bin/ls",

  Environment: {
   "PATH": "/opt/myapp:/usr/bin:$PATH",
   "MYENV": "value",
  },

}
-------------------------------------

==== Pre and post-commands

Sometimes it is useful to be able to execute one or several commands
before or after the execution of an application, for example, to
perform some pre- or postprocessing. These pre/post commands are executed
on a login node (i.e. they are not part of the batch job).

--------------------------------------
{
 Name: SomeSimulation,
 Version: "1.0",
 Executable: "/usr/bin/simulation",

 PreCommand: "/opt/licenses/aquire_license",
 
 PostCommand: "/opt/licenses/release_license",
 
}
-------------------------------------

==== Prologue and epilogue

These commands will be executed as part on a batch node of the user's job script,
and are placed before / after the application executable command.

--------------------------------------
{
 Name: SomeSimulation,
 Version: "1.0",
 Executable: "/usr/bin/simulation",

 Prologue: "module load some_module"
 
 Epilogie: "",
 
}
-------------------------------------

==== Interactive execution when using a batch system

If an application should not be submitted to the batch system, but be run on 
the login node (i.e. interactively), a flag in the IDB can be set:

-------------------------------------
{
  Name: SomeApp,
  Version: 1.0,
    
# instruct UNICORE to run the application on a login node

  RunOnLoginNode: true,

}
--------------------------------------

==== Exit code handing

By default, a UNICORE job will be set to NOT_SUCCESSFUL if the application exits
with a non-zero exit code.
If you want to change this behaviour, you can set a flog

-------------------------------------
{
  Name: SomeApp,
  Version: 1.0,
    
# instruct UNICORE to NOT fail if the application
# exits with non-zero exit code

  IgnoreNonZeroExitCode: true,

}
--------------------------------------


=== Application argument metadata

For client components it can be useful to have a description of an
application in terms of its arguments. This allows for example the
UNICORE Portal to automatically build a nice GUI for the application.
  
  
--------------------------------------
{
 Name: SomeApp,
 Version: 1.0,

 Parameters: {
 
  SOURCE:{
    Type: filename,
    Description: "The input file",
  },

  VERBOSE:{
    Type: boolean,
    Description: "Verbose mode",
  },

  PRECISION:{
    Type: choice,
    Description: "Computational precision",
    ValidValues: [
         "sloppy", "normal", "pedantic",
    ],
  },
  
 },

}
-------------------------------------
  
The meaning of the attributes should be fairly obvious.
  
 - the +Description+ attribute contains a human-readable description of the argument
 
 - the +Type+ attribute can have the values (lower/upper case does not
 matter) "string", "boolean", "int", "double", "filename" or
 "choice". In the case of "choice", the +ValidValues+ attribute is
 used to specify the list of valid values. The type +filename+ is used
 to specify that this is an input file for the application, allowing
 clients to enable special actions for this.

 - The +ValidValues+ attribute is used to limit the range of valid
values, depending on the +Type+ of the argument. The processing of
this attribute is client-dependent.  The UNICORE Rich Client supports
intervals for the numeric types, and Java regular expressions for the
string types.

==== Per-application resource requirements

If the application requires any default resources, like particular
node constraints, or a specific queue, you can add resource requests
in the IDB.

For example:

---------------
{
 Name: SomeSimulation,
 Version: "3.0",

 Resources: {
  Nodes: "2",
  NodeConstraints: "amd",
 }
}
---------------

Note that the user job can override these, i.e. if the user requests
different values for the requested resources, the values from the user
job will be used.
