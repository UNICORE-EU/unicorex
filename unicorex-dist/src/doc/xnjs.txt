[[ux_xnjs]]
Configuring the XNJS
--------------------

The XNJS is an internal UNICORE/X component that deals with the actual
job execution and file system access. It is configured using a properties 
file named 'xnjs.properties'. It is include'd from the main config file.

Here's an overview of the most important properties that can be set in this file.

include::xnjsMainProperties.txt[]

Most of the other settings in this file are used to configure the
internals of the XNJS and should usually be left at their default
values.

The UNICORE TSI
~~~~~~~~~~~~~~~

This section describes installation and usage of the UNICORE TSI.
This is a mandatory step if you want to interface to batch systems
such as Slurm to efficiently use a compute cluster.

[NOTE]
===========
Without this component, all jobs will run on the UNICORE/X server, under the
user id that started UNICORE/X.
===========

In a nutshell, you have to perform the following steps

  - Install the UNICORE TSI on your cluster front end node

  - Edit the tsi.properties file

  - On the UNICORE/X server, edit uas.config, simpleidb and xnjs.properties

  - Start the newly installed TSI (as root in a multiuser setting)

  - Restart UNICORE/X


==== Installation of the correct TSI

The TSI is a service that is running on the target system.
In case of a cluster system, you'll need to install it on the frontend
machine(s), i.e. the machine from where your jobs are submitted to the
batch system.  There are different variants available for the
different batch systems such as Torque or SGE.

Usually installation and start of the TSI will be performed as the
root user.  The TSI will then be able to change to the current Grid
user's id for performing work (Note: nothing will ever be executed as
"root").  You can also use a normal user, but then all commands will
be executed under this user's id.

As the TSI is a central and sensitive service, make sure to read
its documentation. This guide serves just as a quick overview of
the necessary steps.

 - First, download and install the UNICORE TSI package. The UNICORE
core server bundle ("quickstart" package) includes the TSI in the
'tsi' subdirectory. You should copy this folder to the correct machine
first.  In the following this will be denoted by <tsidir>

 - Install the correct TSI variant by 

--------------------------------
 cd <tsidir>
 ./Install.sh
--------------------------------
When prompted for the path, choose an appropriate on, denoted '<your_tsi>' in the following

 - Check the TSI configuration, especially command locations, path settings etc.

==== Required TSI Configuration

Configuration is done by editing <tsi_conf_dir>/tsi.properties
At least check the following settings:

--------------------------------

# UNICORE/X machine
tsi.njs_machine=<UNICORE/X host>

# UNICORE/X listener port (check unicorex/conf/xnjs_legacy.xml variable "CLASSICTSI.replyport"
tsi.njs_port=7654

# TSI listener port (check unicorex/conf/xnjs_legacy.xml variable "CLASSICTSI.port"
tsi.my_port=4433
-------------------------------


==== UNICORE/X configuration

Edit 'unicorex/conf/uas.config' and check that the "xnjs.properties" file
is included

--------------------------------
# read XNJS/TSI config
$include.XNJS conf/xnjs.properties
--------------------------------

Edit 'unicorex/conf/xnjs.properties'. Check the filespace location,
this is where the local job directories will be created. On a cluster,
these have to be on a shared part of the filesystem. Also, the
filespace location has to be read/write/executable for the current
user. If you wish to avoid a world-executable directory, it is possible
to use a per-user location, like '$HOME/UNICORE_Jobs'.

Check the 'CLASSICTSI' related properties. Set the correct value for
the machine and the ports (these can usually be left at their default
values). The CLASSICTSI.machine property is a comma separated list of
machines names or IP addresses. Optionally, a port number can be added
to each entry, separated from the machine by a colon. The XNJS will
establish connections to each of these machines and ports in a
round-robin fashion to ensure that jobs can be submitted and job
statuses retrieved even if one of the TSI instances is
unavailable. Should the port not be given along with the machine,
CLASSICTSI.port will be used as a default.

Here is an small example.

--------------------------------
XNJS.filespace=$HOME/UNICORE_Jobs/
XNJS.idbfile=/opt/unicore/unicorex/conf/simpleidb

CLASSICTSI.machine=login.mycluster.com
CLASSICTSI.port=4433
CLASSICTSI.replyport=7654
CLASSICTSI.priveduser=unicore

XNJS.staging.wget=wget --no-check-certificate
--------------------------------

==== Communication parameters

Some additional parameters exist for tuning the XNJS-TSI communication.
  
.XNJS-TSI communication settings
[options="header"]
|=======================
| property name		| range of values | default value | description	
|CLASSICTSI.BUFFERSIZE  | integer | 1000000 | Buffersize for filetransfers in bytes
|CLASSICTSI.socket.timeout  | integer | 300000 | Socket timeout in milliseconds 
|CLASSICTSI.socket.connect.timeout  | integer | 10000 | Connection timeout in milliseconds 
|=======================

==== Tuning the batch system settings

UNICORE uses the normal batch system commands (e.g. qstat) to get the
status of running jobs.  There is a special case if a job is not
listed in the qstat output. UNICORE will then assume the job is
finished. However, in some cases this is not true, and UNICORE will
have a wrong job status.  To work around, there is a special property

---------
# how often the XNJS will re-try to get the status of a job
# in case the job is not listed in the status listing
CLASSICTSI.statusupdate.grace=2
---------

If the value is larger than zero, UNICORE will re-try to get the job status. 

[NOTE]
============
When changing TSIs, it's a good idea to remove the UNICORE/X state and any
files before restarting. See xref:ux_persistence[] for details
=============

==== Enabling SSL for the XNJS to TSI communication

The UNICORE/X server can be set up to use SSL for communicating with
the UNICORE TSI. On the UNICORE/X side, this is very simple to switch
on. In the XNJS config file, set the following property to 'false' (by
default it is set to true):

---------
# enable SSL -
CLASSICTSI.ssl.disable=false
---------

To setup the TSI side, please refer to the TSI manual!

==== Using an SSH tunnel for the XNJS to TSI communication

In the special case that the XNJS callback port is not accessible from
the TSI server, you may want to use an SSH tunnel configuration. For
example, this case occurs if the TSI is running in a different
location (e.g. an Amazon cloud) than the UNICORE/X server.

We recommend using the tool "autossh", and adding the tunnel setup to to your UNICORE/X start
script.

Here is an example how to do this

--------------
killall -g autossh
autossh -M 0 -f -o "ExitOnForwardFailure=yes" -o "ServerAliveInterval 30"
  -o "ServerAliveCountMax 3" -4 -N
  -L 4433:localhost:4433
  -R 7654:localhost:7654
  -i path_to_key remoteuser@remote.server.org
-------------

==== TSI configuration parameter reference

Here is a full list of TSI-related parameters.

include::xnjsTSIProperties.txt[]


Operation without a UNICORE TSI
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In some situations (e.g. in a Windows-only environment) you will not
use the UNICORE TSI, which is designed for multi-user Unix
environments. The XNJS can run code in an "embedded" mode on the
UNICORE/X machine. Note that this is without user switching, and
inherently not secure as user code can access potentially sensitive
information, such as configuration data. Also, there is no separation
of users.

Embedded mode is enabled in xnjs.properties file  by setting

--------
coreServices.targetsystemfactory.tsiMode=embedded
--------

The embedded mode can be configured with a set of properties which are
listed in the following table.

include::xnjsLocalTSIProperties.txt[]

The IDB
-------

include::xnjs-idb.txt[]

include::xnjs-idb-main.txt[]

include::xnjs-idb-applications.txt[]

include::xnjs-tsi-custom.txt[]

include::xnjs-dynamicincarnation.txt[]

include::xnjs-dynamicincarnation-context.txt[]


Data staging
------------

When executing user jobs, the XNJS also performs data staging, 
i.e. getting data from remote locations before starting the job, and
uploading data when the job has finished. A variety of protocols
can be used for data movement, including UNICORE-specific protocols such 
as BFT or UFTP, but also standard protocols like ftp, scp, and e-mail.

Some of these (like mail) have additional configuration options, which
are given in this section.

include::scp.txt[]

include::mailto.txt[]


GridFTP
~~~~~~~

Using GridFTP requires a proxy cert, please refer to section xref:ux_proxies[]


Configuration reference
~~~~~~~~~~~~~~~~~~~~~~~

The configuration settings related to data staging are summarized in the following 
table.

include::xnjsStagingProperties.txt[]
